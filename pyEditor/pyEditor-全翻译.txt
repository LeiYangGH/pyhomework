"""
################################################################################
pyEditor: 一个基于 Python/tkinter 的简单文本编辑器.
使用Tk文本小部件，加上GuiMaker工具栏按钮，实现可作为独立运行的功能简单的文本编辑器
功能包括
- 打开文件，通过文件查找对话框浏览要打开的文件，为了简化，目前限制为.txt文件，编码为utf8
- 保存当前窗口文本到文件
- 剪切、复制、粘贴这三个基本的编辑功能
- 查找
- 统计字数
################################################################################
"""

import sys
import os                                    
from tkinter import *
from tkinter.filedialog   import Open              
from tkinter.messagebox   import showinfo, showerror, askyesno
from tkinter.simpledialog import askstring, askinteger
from tkinter.colorchooser import askcolor

SEL_FIRST = SEL + '.first'     # 选择开始标识           
SEL_LAST = SEL + '.last'       # 选择结束标识 
'''
################################################################################
＃主体类：构造编辑器界面和动作
＃不是GuiMaker的直接子类，因为该类采用多种形式。
################################################################################  
'''        
class TextEditor:              # 和工具栏框架类绑定在一起          
    editwindows = []           # 用来检测整个进程类的退出信号         
    testfile = 'test.txt'      # 默认打开和保存的文件名
    utf8 = 'utf-8'             # 默认字符编码

    def __init__(self):
        self.lastfind = None
        self.openDialog = None
        self.text.focus()                           
        self.update()                           

    def start(self):                                
        self.toolBar = [('Open',  self.onOpen,   {'side': LEFT}),  # 被GuiMaker.__init__调用
            ('Save',  self.onSave,   {'side': LEFT}), # 配置工具栏
            ('Cut',   self.onCut,    {'side': LEFT}), # 分别是显示的文字、调用的函数、按钮排列对齐方向
            ('Copy',  self.onCopy,   {'side': LEFT}), 
            ('Paste', self.onPaste,  {'side': LEFT}), 
            ('Find',  self.onRefind, {'side': LEFT}),
            ('Count',  self.onCount, {'side': LEFT})]

    def makeWidgets(self):                           # 被GuiMaker.__init__调用
        name = Label(self, bg='black', fg='white')   
        name.pack(side=TOP, fill=X)                  # 包装（pack）工具栏
                                                     
        vbar = Scrollbar(self)
        hbar = Scrollbar(self, orient='horizontal')
        text = Text(self, padx=5, wrap='none')       # 禁用自动换行 

        vbar.pack(side=RIGHT,  fill=Y)
        hbar.pack(side=BOTTOM, fill=X)               # 最后才包装文本框  
        text.pack(side=TOP,    fill=BOTH, expand=YES)# 否则滚动条被遮挡  

        text.config(yscrollcommand=vbar.set)    # 文字移动的似乎调用vbar.set
        text.config(xscrollcommand=hbar.set)
        vbar.config(command=text.yview)         # 滚动条滚动时候调用text.yview
        hbar.config(command=text.xview)         # 另一种写法 hbar['command']=text.xview

        self.text = text
        self.filelabel = name

    ############################################################################
    # 工具栏命令函数
    ############################################################################
    def my_askopenfilename(self):# 会记忆上次打开的路径
        if not self.openDialog:
           self.openDialog = Open(initialdir='.',
                                  filetypes=[('txt files',     '.txt')])
        return self.openDialog.show()

#打开文件函数
    def onOpen(self):
        """
        先通过对话框浏览要打开的文本文件，然后通过utf8编码打开显示
        """
        self.testfile = self.my_askopenfilename()
        if not self.testfile: 
            return
        text = open(self.testfile, 'r', encoding=self.utf8).read()
        self.knownEncoding = self.utf8
        self.setAllText(text)
        self.setFileName(self.testfile)
        self.text.edit_reset()            #清除撤销重做痕迹 
        self.text.edit_modified(0)        #清除修改标志 
        return

#保存文件函数
    def onSave(self):
        # 保存所有文本内容到文件，文件名在打开时候已经记忆
        text = self.getAllText() # 所有文本内容，包括回车换行符
        self.update()
        file = open(self.testfile, 'w', encoding=self.utf8)
        file.write(text)
        file.close()
        self.setFileName(self.testfile)          
        self.text.edit_modified(0)          
        self.knownEncoding = self.utf8    
    
#复制文本函数
    def onCopy(self):                           # 得到用鼠标复制的文本
        if not self.text.tag_ranges(SEL):       # 并保存在跨程序的剪贴板里
            showerror('PyEdit', 'No text selected')
        else:
            text = self.text.get(SEL_FIRST, SEL_LAST)
            self.clipboard_clear()
            self.clipboard_append(text)

#删除文本函数
    def onDelete(self):                         # 删除选中的文本，不保存
        if not self.text.tag_ranges(SEL):
            showerror('PyEdit', 'No text selected')
        else:
            self.text.delete(SEL_FIRST, SEL_LAST)

    def onCut(self):
        if not self.text.tag_ranges(SEL):
            showerror('PyEdit', 'No text selected')
        else: # 保存并删除选中的文本
            self.onCopy()                       
            self.onDelete()

#粘贴文本函数
    def onPaste(self):
        try:
            text = self.selection_get(selection='CLIPBOARD')
        except TclError:
            showerror('PyEdit', 'Nothing to paste')
            return
        self.text.insert(INSERT, text)          # 把粘贴的字符添加到当前光标所在处
        self.text.tag_remove(SEL, '1.0', END)
        self.text.tag_add(SEL, INSERT + '-%dc' % len(text), INSERT)
        self.text.see(INSERT)                   # 选中文本，编译剪切 


    ############################################################################
    # 查找相关功能
    ############################################################################
#查找函数
    def onFind(self, lastkey=None):
        key = lastkey or askstring('PyEdit', 'Enter search string')
        self.text.update()
        self.text.focus()
        self.lastfind = key
        if key:                                                    
            nocase = True    # 不区分大小写          
            where = self.text.search(key, INSERT, END, nocase=nocase)
            if not where:    # 如果已经到了文本末尾则报告没找到，不再重头查找                                      
                showerror('PyEdit', 'String not found')
            else:
                pastkey = where + '+%dc' % len(key)        # 找到上次的关键字查到的位置   
                self.text.tag_remove(SEL, '1.0', END)      # 移除所有选中标志   
                self.text.tag_add(SEL, where, pastkey)     # 选中当前这次查到的关键字   
                self.text.mark_set(INSERT, pastkey)        # 为下一次查找做准备   
                self.text.see(where)                       # 滚动文字到可视区域   
#继续查找函数
    def onRefind(self):
        self.onFind(self.lastfind)
#统计字数函数
    def onCount(self): #
        text = self.getAllText()
        showinfo(title=None, message=str(len(text)))
    ############################################################################
    # 一些有用的函数
    ############################################################################
    def getAllText(self):
        return self.text.get('1.0', END + '-1c')    # 把显示的文本赋值给字符串
    def setAllText(self, text):
        """
        caller: call self.update() first if just packed, else the
        initial position may be at line 2, not line 1 (2.1; Tk bug?)
        """
        self.text.delete('1.0', END)         # 把文本放到文本框显示     
        self.text.insert(END, text)              
        self.text.mark_set(INSERT, '1.0')    # 把插入光标放到最顶上     
        self.text.see(INSERT)                # 把页面可视区域滚动到顶部     

    def setFileName(self, name):                  
        self.currfile = name  # 当前文件名，用来保存
        self.filelabel.config(text=str(name))

"""
###############################################################################
一个扩展的框架，用来自动创建使窗口的工具栏。
内部嵌入的组件使用guimakerframemenu。
顶层窗口使用guimakerwindowmenu。
###############################################################################
"""
class GuiMaker(Frame):
    toolBar = []                       

    def __init__(self, parent=None):
        Frame.__init__(self, parent)
        self.pack(expand=YES, fill=BOTH)        
        self.start()                            
        self.makeToolBar()                      
        self.makeWidgets()                      

    def makeToolBar(self):
        """
        在底部创建工具栏按钮，为了保证窗口缩放时候按钮形状不变，
        设置 expand=no, fill=x
        """
        if self.toolBar:
            toolbar = Frame(self, cursor='hand2', relief=SUNKEN, bd=2)
            toolbar.pack(side=BOTTOM, fill=X)
            for (name, action, where) in self.toolBar:
                Button(toolbar, text=name, command=action).pack(where)

    def makeWidgets(self):
        name = Label(self,
                     width=40, height=10,
                     relief=SUNKEN, bg='white',
                     text   = self.__class__.__name__,
                     cursor = 'crosshair')
        name.pack(expand=YES, fill=BOTH, side=TOP)

    def start(self): 
        "通过在子类里重写，可以添加修改工具栏菜单等"
        pass
################################################################################
#可直接使用的编辑器类
#由混合在guimaker框架的系列子类建立菜单和工具栏
#这些类都是常见的使用场景但很容易扩展其他配置和功能
#通过调用texteditormain().mainloop()使编辑器作为一个独立的程序开始运行；
#通过重新定义或扩展onquit函数可以改变退出时的行为
################################################################################

#-------------------------------------------------------------------------------
#在quit()关闭函数中，如果有任何文本的编辑改动，不要默默地退出整个应用程序
#窗口是在进程里开启的-如果其他窗口关闭，那更改也会丢失，包括多个Tk编辑器父类
#用一个列表跟踪所有在进程里打开的pyedit窗口实例，
#这可能是太过宽泛（如果我们destroy()代替quit()，只需要检查子类被销毁），
#但最好选择包容所有情况的方案；
#假设一个texteditormainpopup弹出框从来不是其他编辑器窗口的父类，
#当父控件被销毁，顶层的子控件一同被销毁；这并没有解决
#关闭来自pyedit类的范围外的情况（对每个Tkinter部件来说，退出是可用的
#对每一个部件，任何部件的类型可以是顶层的父控件！）；客户端
#负责检查所有的编辑内容的变化；
#注意Tkinter的Destroy绑定事件在这里起不到作用，因为其回调
#不能运行GUI操作比如文本更改测试和获取等
#-------------------------------------------------------------------------------


###################################
# 当文本编辑器占有窗口
###################################
class TextEditorMain(TextEditor, GuiMaker):
    """
主要的编辑器窗口，在用户点击退出时，调用quit()退出应用程序，
生成菜单和工具栏；根据parent的不同参数，父控件可以是默认的Tk控件，明确指定的的TK控件，或者最高级：
父控件必须是一个窗口，也应该是一个TK控件，这样一来就不会随着父控件默默被销毁；
所有的主要编辑器窗口检查同一进程中所有其他窗口用户界面的变化，因为
这里的quit()将退出整个应用程序；编辑的框架不需要占用
整个窗口（可能还有其他的部分，比如pyview），但它的退出会结束程序；
退出工具栏，以及窗口右上角的X的时候，调用onquit
    """
    def __init__(self, parent=None):
        # 编辑器占满整个窗口
        GuiMaker.__init__(self, parent)                  # 使用主窗口的菜单
        TextEditor.__init__(self) # GuiMaker框架把自己打包
        self.master.protocol('WM_DELETE_WINDOW', self.onQuit)
        TextEditor.editwindows.append(self)

    def onQuit(self):# 当用户点击关闭
        GuiMaker.quit(self)

class TextEditorMainPopup(TextEditor, GuiMaker):
    """
弹出窗口，当收到来自界面的退出消息时，只把自身销毁，
在窗口建立一个菜单；自己是自己的的顶层父控件，这是孩子
是进程里其他默认Tk控件或其他窗口或控件的子控件；
添加进列表，这样主窗口退出，也将被检查到变更；
如果任何编辑器主窗口将被创建，那它的父控件也应该和编辑器主窗口的父控件是同一个，
这样就不会没被跟踪而默默的被关闭；
当点击菜单工具栏或窗口口右上角的X时，调用onquit；
    """
    def __init__(self, parent=None, winTitle=''):
        self.popup = Toplevel(parent)
        GuiMaker.__init__(self, self.popup)  # 使用主窗口菜单            
        TextEditor.__init__(self)  # 新弹出窗口的框架
        assert self.master == self.popup
        self.popup.protocol('WM_DELETE_WINDOW', self.onQuit)
        TextEditor.editwindows.append(self)

    def onQuit(self):
        self.popup.destroy()                     # 仅仅杀掉当前窗口 
        TextEditor.editwindows.remove(self)      # 同时杀掉其他子窗口 

    def onClone(self): 
        TextEditor.onClone(self, makewindow=False)
#########################################
# 当编辑器嵌入到其他窗口
#########################################   
class TextEditorComponent(TextEditor, GuiMaker):
    """
     一个组件框架，把自身附加到其他窗口，具有完整的菜单/工具栏选项，
     当收到来自GUI的退出消息时，仅仅把自身擦除;
     收到退出时只验证自身的任何改变;
     不拦截窗口管理器边框的关闭按钮：不拥有窗口;
     不添加自身到更改跟踪列表：属于较大的应用程序的一部分;
    """
    def __init__(self, parent=None):  
# 使用基于框架的应用程序   
        GuiMaker.__init__(self, parent)         # 添加所有菜单、工具栏按钮         
        TextEditor.__init__(self)  # GuiMaker必须最先初始化

    def onQuit(self):
        self.destroy() 

class TextEditorComponentMinimal(TextEditor, GuiMaker):
    """
     用来附加的PyEdit组件框架，没有Quit和File菜单选项;
     在启动时，从工具栏中删除Quit，并删除文件菜单
     或禁用其所有项目（听起来有点像黑客的，但效果不错）; 菜单和
     工具栏结构是每个实例独有的数据：更改不影响其他组件;
     在GUI中退出不会发生，因为它已被可用选项中删除;
    """
    def __init__(self, parent=None, deleteFile=True):
        self.deleteFile = deleteFile
        GuiMaker.__init__(self, parent)               # GuiMaker把自己打包  
        TextEditor.__init__(self) # 编辑器在中间加入

    def start(self):
        TextEditor.start(self)       # GuiMaker调用 开始   

             
################################################################################
# 完全独立的程序运行，程序入口处
################################################################################
if __name__ == '__main__':                            
    fname = None
    TextEditorMain().pack(expand=YES, fill=BOTH)   
    mainloop()